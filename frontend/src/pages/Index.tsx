import { useRef, useState } from "react";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { IoSearchSharp } from "react-icons/io5";
import CompanyOverview from "@/components/CompanyOverview";
import FinancialCharts from "@/components/FinancialCharts";
import HealthScore from "@/components/HealthScore";
import Footer from "@/components/Footer";
import { CompanyData } from "@/domain.types";
import LoadingDialog from "@/components/LoadingDialog";
import ErrorDialog from "@/components/ErrorDialog";
import Header from "@/components/Header";
import { cn } from "@/lib/utils";

interface ErrorState {
  title: string;
  description: string;
}

const Index = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [companyData, setCompanyData] = useState<CompanyData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<ErrorState | null>(null);
  const [inputError, setInputError] = useState<string | null>(null);
  const abortControllerRef = useRef<AbortController | null>(null);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSearchTerm(value);
    
    if (value.length > 4) {
      setInputError("Ë®ºÂà∏Áï™Âè∑„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ");
    } else {
      setInputError(null);
    }
  };

  const isSearchDisabled = searchTerm.length === 0 || searchTerm.length > 4;

  const handleSearch = async () => {
    // Êó¢Â≠ò„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„Çí„Ç≠„É£„É≥„Çª„É´
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }

    // Êñ∞„Åó„ÅÑAbortController„Çí‰ΩúÊàê
    const abortController = new AbortController();
    abortControllerRef.current = abortController;

    setIsLoading(true);
    setError(null);

    try {
      const res = await fetch(`/api/stock?securitiesCode=${searchTerm}`, {
        signal: abortController.signal,
      });
      const data = await res.json();

      switch (res.status) {
        case 200:
          setCompanyData(data);
          setIsLoading(false);
          break;
        case 404:
          setError({
            title: "„ÅÇ„Çå„ÇåÔºü‰ºÅÊ•≠„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì‚Ä¶ üò∞",
            description: "Ë®ºÂà∏„Ç≥„Éº„Éâ„ÅåÈñìÈÅï„Å£„Å¶„Çã„Åã„ÇÇÔºü „ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑÔºÅ",
          });
          setIsLoading(false);
          break;
        case 500:
          setError({
            title: "„Çµ„Éº„Éê„Éº„Åå„Å°„Çá„Å£„Å®‰ºëÊÜ©‰∏≠„Åø„Åü„ÅÑ„Åß„Åô üõ†Ô∏è",
            description: "ÊôÇÈñì„Çí„Åä„ÅÑ„Å¶„Åã„Çâ„ÄÅ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„Åü„ÇÅ„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ„Å≠„ÄÇ",
          });
          setIsLoading(false);
          break;
        default:
          setError({
            title: "„Å™„Çì„Å†„ÅãÂ§â„Å™„Åì„Å®„ÅåËµ∑„Åç„Åæ„Åó„Åü üåÄ",
            description: "„ÇÇ„ÅÜ‰∏ÄÂõû„ÇÑ„Å£„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Åù„Çå„Åß„ÇÇ„ÉÄ„É°„Å™„Çâ„ÄÅ„ÅäÁü•„Çâ„Åõ„ÅÑ„Åü„Å†„Åë„Çã„Å®Âä©„Åã„Çä„Åæ„ÅôÔºÅ",
          });
          setIsLoading(false);
          break;
      }
    } catch (error: unknown) {
      if (error instanceof Error && error.name !== "AbortError") {
        setError({
          title: "„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„Åã„ÇÇÔºü üì°",
          description: "„Ç§„É≥„Çø„Éº„Éç„ÉÉ„Éà„ÅÆÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÄÅ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„Å£ÔºÅ",
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancel = () => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      abortControllerRef.current = null;
      setIsLoading(false);
    }
  };

  return (
    <>
      <Header />
      <div className="min-h-screen bg-gradient-to-b from-background to-muted p-6">
        <div className="max-w-7xl mx-auto space-y-8 animate-fade-in">
          <Card className="p-8 backdrop-blur-sm bg-white/50">
            <h1 className="text-4xl font-bold text-center mb-8">
              ‰ºÅÊ•≠ÂÅ•Â∫∑Â∫¶„ÉÅ„Çß„ÉÉ„Ç´„Éº
            </h1>
            <div className="flex gap-4 max-w-xl mx-auto">
              <Input
                placeholder="Ë®ºÂà∏Áï™Âè∑„ÇíÂÖ•Âäõ"
                value={searchTerm}
                onChange={handleSearchChange}
                className={cn(
                  "text-lg",
                  inputError && "border-destructive border-2"
                )}
              />
              <Button onClick={handleSearch} size="lg" disabled={isSearchDisabled}>
                <IoSearchSharp />
                „ÉÅ„Çß„ÉÉ„ÇØ
              </Button>
            </div>
            {inputError && (
              <p className="text-destructive text-sm">{inputError}</p>
            )}
          </Card>

          {companyData && (
            <div className="space-y-6">
              <CompanyOverview company={companyData} />
              <HealthScore company={companyData} />
              <FinancialCharts company={companyData} />
            </div>
          )}

          <Footer />
        </div>
        <LoadingDialog open={isLoading} onCancel={handleCancel} />
        <ErrorDialog
          open={error !== null}
          onClose={() => setError(null)}
          title={error?.title ?? ""}
          description={error?.description ?? ""}
        />
      </div>
    </>
  );
};

export default Index;
